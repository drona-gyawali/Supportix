import logging

from core.automation.base_rule import BaseRule
from core.models import Ticket
from core.utils.llm import generate_tags
from django.db import transaction

logger = logging.getLogger(__name__)


class TagByContent(BaseRule):
    """
    Rule to automatically assign tags to a ticket using LLM based on title and description.
    """

    def __init__(self, ticket, **kwargs):
        super().__init__(ticket, **kwargs)

    def should_apply(self):
        try:
            ticket = Ticket.objects.get(ticket_id=self.ticket_id)
            return not bool(ticket.tag and ticket.tag.strip())
        except Ticket.DoesNotExist:
            logger.warning(f"[TagByContent] Ticket not found: {self.ticket_id}")
            return False

    def apply(self):
        try:
            with transaction.atomic():
                ticket = Ticket.objects.select_for_update().get(
                    ticket_id=self.ticket_id
                )

                if ticket.tag and ticket.tag.strip():
                    return {
                        "message": f"[TagByContent] Ticket already has tags: {ticket.tag}. Skipping."
                    }

                tags = generate_tags(ticket.issue_title, ticket.issue_desc)

                if not tags:
                    return {"message": "[TagByContent] No tags generated by LLM."}

                ticket.tag = ", ".join(tags)
                ticket.save()

                return {"success": f"[TagByContent] Tags applied: {tags}"}

        except Ticket.DoesNotExist:
            return {"error": f"[TagByContent] Ticket not found: {self.ticket_id}"}
        except Exception as e:
            logger.exception(
                f"[TagByContent] Failed to apply tags for ticket {self.ticket_id}"
            )
            return {"error": f"[TagByContent] Error applying tags: {str(e)}"}
